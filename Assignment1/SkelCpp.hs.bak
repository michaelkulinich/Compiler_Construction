-- Haskell module generated by the BNF converter

module SkelCpp where

import qualified AbsCpp

type Err = Either String
type Result = Err String

failure :: Show a => a -> Result
failure x = Left $ "Undefined case: " ++ show x

transId :: AbsCpp.Id -> Result
transId x = case x of
  AbsCpp.Id string -> failure x
transProgram :: AbsCpp.Program -> Result
transProgram x = case x of
  AbsCpp.PDefs defs -> failure x
transDef :: AbsCpp.Def -> Result
transDef x = case x of
  AbsCpp.DFun type_ id args stms -> failure x
transArg :: AbsCpp.Arg -> Result
transArg x = case x of
  AbsCpp.ADecl type_ id -> failure x
transStm :: AbsCpp.Stm -> Result
transStm x = case x of
  AbsCpp.SExp exp -> failure x
  AbsCpp.SDecls type_ ids -> failure x
  AbsCpp.SInit type_ id exp -> failure x
  AbsCpp.SReturn exp -> failure x
  AbsCpp.SReturnVoid -> failure x
  AbsCpp.SWhile exp stm -> failure x
  AbsCpp.SBlock stms -> failure x
  AbsCpp.SIfElse exp stm1 stm2 -> failure x
transExp :: AbsCpp.Exp -> Result
transExp x = case x of
  AbsCpp.ETrue -> failure x
  AbsCpp.EFalse -> failure x
  AbsCpp.EInt integer -> failure x
  AbsCpp.EDouble double -> failure x
  AbsCpp.EString string -> failure x
  AbsCpp.EId id -> failure x
  AbsCpp.EApp id exps -> failure x
  AbsCpp.EPIncr exp -> failure x
  AbsCpp.EPDecr exp -> failure x
  AbsCpp.EIncr exp -> failure x
  AbsCpp.EDecr exp -> failure x
  AbsCpp.ETimes exp1 exp2 -> failure x
  AbsCpp.EDiv exp1 exp2 -> failure x
  AbsCpp.EPlus exp1 exp2 -> failure x
  AbsCpp.EMinus exp1 exp2 -> failure x
  AbsCpp.ELt exp1 exp2 -> failure x
  AbsCpp.EGt exp1 exp2 -> failure x
  AbsCpp.ELtEq exp1 exp2 -> failure x
  AbsCpp.EGtEq exp1 exp2 -> failure x
  AbsCpp.EEq exp1 exp2 -> failure x
  AbsCpp.ENEq exp1 exp2 -> failure x
  AbsCpp.EAnd exp1 exp2 -> failure x
  AbsCpp.EOr exp1 exp2 -> failure x
  AbsCpp.EAss exp1 exp2 -> failure x
  AbsCpp.ETyped exp type_ -> failure x
transType :: AbsCpp.Type -> Result
transType x = case x of
  AbsCpp.Type_bool -> failure x
  AbsCpp.Type_int -> failure x
  AbsCpp.Type_double -> failure x
  AbsCpp.Type_void -> failure x
  AbsCpp.Type_string -> failure x

